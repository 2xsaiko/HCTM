import static org.gradle.api.JavaVersion.VERSION_1_8

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61' apply false
    id 'fabric-loom' version '0.2.7-SNAPSHOT' apply false
}

version = hctm_version

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    java {
        sourceCompatibility = VERSION_1_8
        targetCompatibility = VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions.jvmTarget = '1.8'
        kotlinOptions.freeCompilerArgs += '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes'
        kotlinOptions.freeCompilerArgs += '-Xjvm-default=enable'
    }

    group = "net.dblsaiko"

    dependencies {
        minecraft group: "com.mojang", name: "minecraft", version: minecraft_version
        mappings group: "net.fabricmc", name: "yarn", version: mappings_version, classifier: "v2"
        modImplementation group: "net.fabricmc", name: "fabric-loader", version: loader_version

        modImplementation group: "net.fabricmc.fabric-api", name: "fabric-api", version: fabric_api_version
        implementation(group: "net.fabricmc", name: "fabric-language-kotlin", version: fabric_kotlin_version) {
            exclude module: 'fabric-loader'
        }

        modRuntime(group: 'net.dblsaiko.qcommon.cfg', name: 'cfg', version: cfg_version) {
            exclude group: 'net.fabricmc.fabric-api'
        }

        modImplementation(group: 'net.dblsaiko.qcommon.cfg', name: 'cfg-core', version: cfg_core_version) {
            exclude group: 'net.fabricmc.fabric-api'
        }

        modImplementation group: 'net.dblsaiko', name: 'libaddict', version: libaddict_version

        modImplementation group: "net.dblsaiko.qcommon.croco", name: "croco", version: croco_version
    }

    configurations {
        dev
    }

    repositories {
        maven { url 'https://maven.dblsaiko.net' }
    }

    afterEvaluate {
        artifacts {
            dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: remapJar
        }

        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    apply from: 'https://raw.githubusercontent.com/2xsaiko/gradle-tools/master/publish/publish-slim.gradle'
}

// shitty fix for 'unspecified' in version number
subprojects {
    switch (name) {
        case 'hctm-base':
            version = base_version
            break
        case 'retrocomputers':
            version = retrocomputers_version
            break
        case 'rswires':
            version = rswires_version
            break
    }
}

subprojects {
    if (name != 'hctm-base') {
        tasks.remapJar {
            afterEvaluate {
                addNestedDependencies = false
            }
        }

        task remapStandaloneJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
            afterEvaluate {
                input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
                archiveName = "${archivesBaseName}-${version}-standalone.jar"
                addNestedDependencies = true
            }
        }

        tasks.build.dependsOn remapStandaloneJar

        dependencies {
            compile project(path: ':hctm-base', configuration: "dev")
            include project(':hctm-base')
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    pom.withXml {
                        def buildid = System.getenv("PUBLISH_BUILD")

                        def depsNode = asNode().appendNode("dependencies")
                        [project(':hctm-base')].each {
                            def depNode = depsNode.appendNode("dependency")
                            depNode.appendNode("groupId", it.group)
                            depNode.appendNode("artifactId", it.name)
                            depNode.appendNode("version", buildid != null ? "${it.version}-${buildid}" : it.version)
                            depNode.appendNode("scope", "compile")
                        }
                    }
                }
            }
        }
    }
}

subprojects {
    task remapMavenJar(type: Copy, dependsOn: remapJar) {
        afterEvaluate {
            from("${project.buildDir}/libs/$archivesBaseName-${version}.jar")
            into("${project.buildDir}/libs/")
            rename { String fn -> "$archivesBaseName-${version}-maven.jar" }
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-maven.jar")) {
                        builtBy remapMavenJar
                    }
                }
                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
            }
        }
    }
}

task remapMavenJar(type: net.fabricmc.loom.task.RemapJarTask, dependsOn: jar) {
    afterEvaluate {
        input = file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
        archiveName = "${archivesBaseName}-${version}-maven.jar"
        addNestedDependencies = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/$archivesBaseName-${project.version}-maven.jar")) {
                builtBy remapMavenJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom.withXml {
                def buildid = System.getenv("PUBLISH_BUILD")

                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", buildid != null ? "${it.version}-${buildid}" : it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

repositories {
    maven { url = 'https://maven.dblsaiko.net' }
}

dependencies {
    modRuntime group: 'net.dblsaiko', name: 'winwonders', version: '0.1.2-4'
    modRuntime group: 'io.github.prospector', name: 'modmenu', version: '1.8.5+build.23'

    afterEvaluate {
        subprojects.each {
            compile project(path: ":${it.name}", configuration: "dev")
            include project("${it.name}:")
        }
    }
}